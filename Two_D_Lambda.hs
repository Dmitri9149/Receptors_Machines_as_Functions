module Two_D_Lambda where 


--- example of 2-D lambda calculus evaluation 
-- it models session between two agents : the 
-- top is server which receive 3 arguments x, y, z 
-- and calculate the function : (y + x) - z 
-- the two 
-- ---------------------------------------
-- ---------------------------------------
-- are like two outer membranes of two interacting 
-- cells (agents)

--- the '#'  plays the role of 'lambda' symbol in lambda calculus 
-- first two '--' are comments 
-- from top to down there is chain of evaluations 
-- the example correspond 'send / receive face to face ' configuration 
-- if first agent sends the second must receive ( and vise versa) 
-- variable correspond to receive ; value correspond to send 



-- | # x # y # z . (y + x) - z | y | z | x
----------------------------------------------
----------------------------------------------
-- |          v                | 2 | 3 | 5




-- | # x # y # z . (y + x) - z | y | z | x = 5
----------------------------------------------
----------------------------------------------
-- |          v                | 2 | 3 |



-- |    # y # z . (y + 5) - z  | y | z 
----------------------------------------------
----------------------------------------------
-- |          v                | 2 | 3



-- |    # y # z . (y + 5) - z  | y | z = 3
----------------------------------------------
----------------------------------------------
-- |          v                | 2 |



-- |    # y  . (y + 5) - 3     | y | 
----------------------------------------------
----------------------------------------------
-- |          v                | 2 |



-- |    # y  . (y + 5) - 3     | y = 2 
----------------------------------------------
----------------------------------------------
-- |          v                |



-- |       (2 + 5) - 3         | 
----------------------------------------------
----------------------------------------------
-- |          v                |



-- |       4                   | 
----------------------------------------------
----------------------------------------------
-- |          v                |



-- |                            
----------------------------------------------
----------------------------------------------
-- |          4                


-- more difficult example every channel is split : 
-- top agent -> (send, receive)
-- bottom agent -> (receive, send)
-- 
-- below :: both agents send same time ! (two times)
-- so we are in send / send same time configuration 
-- the value will be attached to the first first available 'receive' 
-- variable 
-- here we use only one directed channels : one of two slots is always empty 

-- |( , x ) | (# x # y . ( x + y) , ) | (  , x) | (  , y) | ( 5 , )  | ( 6 ,  ) |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | ( , # x # y . x - y  )  | ( y , ) | ( x , ) | (   , 7) | (   , 9) | 




-- |( , x ) | (  # x # y . ( x + y) ),   | (  , x) | (  , y = 9) | ( 5 , ) |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | ( , # x # y . x - y  )     | ( y , ) | ( x = 6, ) | (   , 7) | 




-- |( , x ) | (  # x  . ( x + 9) ),   | (  , x) | (  , ) | ( 5 , ) |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | ( , # y . 6 - y  )      | ( y , ) | ( ,  ) | (   , 7) | 




-- |( , x ) | (  # x  . ( x + 9),   ) | (  , x) | ( 5 , ) |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | , ( # y . 6 - y  )      | ( y , ) | (   , 7) | 




-- |( , x ) | (  # x  . ( x + 9),   ) | (  , x = 7) |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | ( , # y . 6 - y  )      | ( y = 5 , ) |




-- |( , x ) | (  ( 7 + 9),  )     |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | ( , (6 - 5)  )      |




-- |( , x ) | (  16,  ) |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | ( , 1  )  |




-- |( , x ) | (  16,  ) |
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( y,  ) | ( , 1  )  |




-- |( , 1  )  
----------------------------------------------------------------------------
----------------------------------------------------------------------------
-- |( 16,  ) 



